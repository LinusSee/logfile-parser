openapi: "3.0.3"
info:
  description: "This is a logfile-parser creation server. It allows you to use existing parsers, tell them what values they should match (e.g. a date pattern) and then combine them so they are able to match a single line in a logfile. These parsers will then be executed until the entire logfile has been parsed."
  version: "1.0.0"
  title: "Logfile Parsing"
servers:
  - url: "http://localhost:8080/api"
tags:
- name: "building-blocks"
  description: "Everything needed to create elementary parsers"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/LinusSee/logfile-parser"
- name: "logfile"
  description: "Combine elementary parsers into logfile parsers"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/LinusSee/logfile-parser"




paths:
  /parsers/building-blocks/complex:
    get:
      tags:
      - "building-blocks"
      summary: "Retrieve all existing elementary parsers"
      operationId: "getElementaryParsers"
      responses:
        "200":
          description: "List of existing parsers"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ElementaryParser"



    post:
      tags:
      - "building-blocks"
      summary: "Create a new elementary parser"
      description: ""
      operationId: "createElementaryParser"
      requestBody:
        required: true
        description: "Elementary parser that will be created"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElementaryParser"
      responses:
        "204":
          description: "Successful creation"
        "400":
          description: "Incorrect data format in body"



  /parsers/building-blocks/complex/apply/{parserName}:
    get:
      tags:
      - "building-blocks"
      summary: "Applies the parsers with the specified name"
      description: "Applies an existing parser, specified by its name, to a target string"
      operationId: "applyElementaryParserByName"
      parameters:
      - name: parserName
        description: "The name of the elementary parser to apply"
        in: path
        schema:
          type: string
        required: true
      - name: "target"
        in: "query"
        description: "The target value that will be parsed"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElementaryParsingResponse"



  /parsers/building-blocks/complex/apply:
    post:
      tags:
      - "building-blocks"
      summary: "Send the parser to apply to a target string"
      description: "Send a fully defined parser and the target string to parse. This does not require the parser to exist in the backend and will not create one. It is a stateless, idempotent operation."
      operationId: "applyElementaryParser"

      requestBody:
        description: "Target string and the parser to apply it"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElementaryParsingRequest"

      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElementaryParsingResponse"
        "400":
          description: "Incorrect data format in body"




  /parsers/logfile:
    get:
      tags:
      - "logfile"
      summary: "Get the names of all existing logfile parsers"
      operationId: "getLogfileParserNames"

      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example:
                    - "loglevelDateParser"
                    - "dateTimeParser"


    post:
      tags:
      - "logfile"
      summary: "Creates a logfile parser"
      operationId: "createLogfileParser"

      requestBody:
        description: "Logfile parser that will be created"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLogfileParserRequest"

      responses:
        "204":
          description: "Successful creation"
        "400":
          description: "Incorrect data format in body"



  /parsers/logfile/apply/{parserName}:
    get:
      tags:
      - "logfile"
      summary: "Deletes a pet"
      description: ""
      operationId: "applyLogfileParserByName"

      parameters:
      - name: "parserName"
        in: "path"
        description: "Name of the logfile parser to apply"
        required: true
        schema:
          type: "string"
      - name: "target"
        in: "query"
        description: "Target string that will be parsed"
        required: true
        schema:
          type: "string"

      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogfileParsingRequest"



  /parsers/logfile/apply:
    post:
      tags:
      - "logfile"
      summary: "Send the logfile parser to apply to a target string"
      description: "Send a fully defined logfile parser and the target string to parse. This does not require the parser to exist in the backend and will not create one. It is a stateless, idempotent operation."
      operationId: "applyLogfileParser"

      requestBody:
        description: "Target string and the parser to apply it"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogfileParsingRequest"

      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogfileParsingResponse"
        "400":
          description: "Incorrect data format in body"




components:
  schemas:
    ElementaryParsingRequest:
      type: "object"
      required:
      - "target"
      - "parser"
      properties:
        target:
          type: "string"
          example: "DEBUG someString foobar"
        parser:
          $ref: "#/components/schemas/ElementaryParser"


    ElementaryParsingResponse:
      type: "object"
      required:
      - "name"
      - "result"
      properties:
        name:
          type: "string"
          example: "loglevelParser"
        result:
          type: "string"
          example: "DEBUG"


    LogfileParsingRequest:
      type: "object"
      required:
      - "target"
      - "parser"
      properties:
        target:
          type: "string"
          example: "LoglevelDateParser"
        parser:
            # Same model, so the createRequest is reused (refactor if better solution is found)
            $ref: "#/components/schemas/CreateLogfileParserRequest"



    LogfileParsingResponse:
      oneOf:
        - $ref: "#/components/schemas/LogfileParsingSuccess"
        - $ref: "#/components/schemas/LogfileParsingError"


    #
    # START: Polymorphic types for LogfileParsingResponse
    #
    LogfileParsingSuccess:
      type: "object"
      description: "This is returned if the logfile was parsed successfully."
      required:
        - "result"
      properties:
        result:
          type: "array"
          items:
            $ref: "#/components/schemas/ElementaryParsingResponse"

    LogfileParsingError:
      type: "object"
      description: "This is returned if an error occured while parsing the logfile."
      required:
        - "error"
      properties:
        error:
          type: "string"
    #
    # END: Polymorphic types for LogfileParsingResponse
    #



    CreateLogfileParserRequest:
      type: "object"
      required:
      - "name"
      - "parsers"
      properties:
        name:
          type: "string"
          example: "LoglevelDateParser"
        parsers:
          type: "array"
          items:
            $ref: "#/components/schemas/NamedParser"
        status:
          type: "string"
          description: "pet status in the store"
          enum:
          - "available"
          - "pending"
          - "sold"


    NamedParser:
      type: "object"
      required:
      - "name"
      - "parser"
      properties:
        name:
          type: "string"
          example: "LoglevelParser"
        parser:
          $ref: "#/components/schemas/ElementaryParser"


    ElementaryParser:
      oneOf:
        - $ref: "#/components/schemas/OneOf"
        - $ref: "#/components/schemas/Time"
        - $ref: "#/components/schemas/Date"
        - $ref: "#/components/schemas/Characters"
        - $ref: "#/components/schemas/MatchUntilIncluded"
        - $ref: "#/components/schemas/MatchUntilExcluded"
        - $ref: "#/components/schemas/MatchFor"
        - $ref: "#/components/schemas/MatchUntilEnd"


    #
    # START: Polymorphic types for ElementaryParser
    #
    OneOf:
      type: "object"
      description: "Match one value out of a specified list of values."
      required:
        - "type"
        - "name"
        - "values"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "oneOf"
          enum:
            - "oneOf"
        name:
          type: string
          description: "The name given to the parser."
          example: "loglevelParser"
        values:
          type: "array"
          description: "A list of values. The parser expect to be able to match one of them."
          items:
            type: string
          example:
            - "DEBUG"
            - "INFO"
            - "ERROR"

    Time:
      type: "object"
      description: "Match a time using the specified pattern."
      required:
        - "type"
        - "name"
        - "pattern"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "time"
          enum:
            - "time"
        name:
          type: string
          description: "The name given to the parser."
          example: "isoTimeParser"
        pattern:
          type: string
          description: "The pattern to use when trying to parse a time."
          example: "hh:mm"

    Date:
      type: "object"
      description: "Match a date using the specified pattern."
      required:
        - "type"
        - "name"
        - "pattern"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "date"
          enum:
            - "date"
        name:
          type: string
          description: "The name given to the parser."
          example: "isoDateParser"
        pattern:
          type: string
          description: "The pattern to use when trying to parse a date."
          example: "YYYY-MM-DD"

    Characters:
      type: "object"
      description: "Match a predefined string."
      required:
        - "type"
        - "name"
        - "value"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "characters"
          enum:
            - "characters"
        name:
          type: string
          description: "The name given to the parser."
          example: "messagePrefixParser"
        value:
          type: string
          description: "The string this parser should match"
          example: "Message: "

    MatchUntilIncluded:
      type: "object"
      description: "Match everything until the specified value. The specified value is included in the match."
      required:
        - "type"
        - "name"
        - "value"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "matchUntilIncluded"
          enum:
            - "matchUntilIncluded"
        name:
          type: string
          description: "The name given to the parser."
          example: "untilCorrelationId"
        value:
          type: string
          description: "The value until which should be matched. This value is included in the match."
          example: "<StartCorrelationId>"

    MatchUntilExcluded:
      type: "object"
      description: "Match everything until the specified value. The specified value is not included in the match."
      required:
        - "type"
        - "name"
        - "value"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "matchUntilExcluded"
          enum:
            - "matchUntilExcluded"
        name:
          type: string
          description: "The name given to the parser."
          example: "correlationId"
        value:
          type: string
          description: "The value until which should be matched: This value is not included."
          example: "<EndCorrelationId>"

    MatchFor:
      type: "object"
      description: "Matches the specified number of (unicode) characters."
      required:
        - "type"
        - "name"
        - "count"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "matchFor"
          enum:
            - "matchFor"
        name:
          type: string
          description: "The name given to the parser."
          example: "matchUUID"
        count:
          type: integer
          format: int32
          description: "How many characters to match. Matches any unicode character."
          example: 36

    MatchUntilEnd:
      type: "object"
      description: "A parser that matches everything until the end of the line."
      required:
        - "type"
        - "name"
      properties:
        type:
          type: string
          description: "Used to identify the kind of of parser since type information is lost via JSON."
          example: "matchUntilEnd"
          enum:
            - "matchUntilEnd"
        name:
          type: string
          description: "The name given to the parser. It is fixed for this parsers, since it always does the same"
          enum:
            - "matchUntilEnd"
    #
    # END: Polymorphic types for ElementaryParser
    #
